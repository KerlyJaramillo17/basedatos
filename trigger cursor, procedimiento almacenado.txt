/*Un trigger que impida realizar el servicio de embalsamamiento a un difunto de más de 48 horas transcurridas desde su defunción.
Trigger*/
create or replace function tg_serviciomortuorio() returns trigger
as
$tg_serviciomortuorio$
    declare
        fechadefuncion date;
		horadefuncion time;
		nombreservicio char(256);
		dias int;
begin
		select SERVICIO_MORTUORIO.sm_nombre into nombreservicio from SERVICIO_MORTUORIO
		where SERVICIO_MORTUORIO.sm_id = NEW.sm_id;

        if(nombreservicio='Embalsamamiento') then
		SELECT FALLECIDO.f_fecha_defuncion,FALLECIDO.f_hora_defuncion INTO fechadefuncion,horadefuncion FROM FALLECIDO
		WHERE FALLECIDO.F_ID = NEW.F_ID;
		dias=(new.fsm_fecha - fechadefuncion);
			if(dias>2)then
			raise exception 'No se puede realizar el embalsamamiento porque han pasado mas de 48horas desde la defuncion';
			end if;
			if(dias=2)then
				if(new.fsm_hora>horadefuncion)then
				raise exception 'No se puede realizar el embalsamamiento porque han pasado mas de 48horas desde la defuncion';
				end if;
			end if;
		end if;
        return new;
end;
$tg_serviciomortuorio$
language plpgsql;

create trigger tg_serviciomortuorio before insert OR UPDATE
on fallecido_servicio_murtuorio for each row
execute procedure tg_serviciomortuorio();

insert into fallecido_servicio_murtuorio values (1,1, '12/06/2020', '20:13:23');


/*Un cursor que muestre los ingresos obtenidos por servicio de todos los vendedores.
Cursor*/

do $$
declare
	tabla Record;
	cur_servicio 
	Cursor 
	for
	select velatorio.velatorio_direccion, count (reserva.velatorio_id), sum( factura.fac_total)
	from velatorio
	inner join reserva on reserva.velatorio_id = velatorio.velatorio_id
	inner join factura on factura.res_id = reserva.res_id
	group by velatorio.velatorio_direccion;
	begin
	for tabla in cur_servicio loop
	Raise notice 'Servicio: %, CANTIDAD DIFUNTOS: % ,Ganancias Generadas: %'
	,tabla.velatorio_direccion, tabla.COUNT, tabla.sum;
	end loop;
end $$
language 'plpgsql';

/*Un procedimiento almacenado que devuelva los ingresos obtenidos por servicios, de una sala que se le pase como parámetro.
Procedimiento Almacenado*/

create or replace function obtener_ingresos_sala( salaid integer)
RETURNS TABLE (velatorio int,
  servicio_nombre char,
  ingresos_sala float)
as $BODY$
begin
	RETURN QUERY
	select velatorio.velatorio_id,servicio_velatorio.ser_nombre, sum(servicio_velatorio.ser_precio)as ingresos from velatorio
	inner join reserva on reserva.velatorio_id = velatorio.velatorio_id
	inner join factura on factura.res_id = reserva.res_id
	inner join reserva_servicio_velatorio on reserva_servicio_velatorio.res_id = reserva.res_id
	inner join servicio_velatorio on servicio_velatorio.ser_id = reserva_servicio_velatorio.ser_id
	where velatorio.velatorio_id =salaid
	group by (servicio_velatorio.ser_nombre, velatorio.velatorio_id);
	
end
$BODY$ language plpgsql;

select * from obtener_ingresos_sala(2);


select * from obtener_ingresos_sala(4);